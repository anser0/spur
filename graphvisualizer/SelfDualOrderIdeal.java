import java.util.*;

public class SelfDualOrderIdeal extends OrderIdeal {
    protected SelfDualPoset poset;  // the self-dual poset the self-dual order ideal is a part of

    // helper function for constructor; verifies that ideal is self-dual
    private boolean verify() {
        if (getCardinality()*2 != poset.getCardinality()) {
            return false;
        }
        for (Element e: elements) {
            if (elements.contains(poset.dual(e))) {
                return false;
            }
        }
        return true;
    }

    // constructor: constructs the ideal generated by the generators, a subset of the elements of the given poset
    public SelfDualOrderIdeal(SelfDualPoset poset, Set<Element> generators) {
        super(poset, generators);
        this.poset = poset;
        if (!verify()) {
            throw new Error("ideal is not self-dual");
        }
    }

    // constructor: constructs the ideal generated by the generators
    // CAUTION: if check = false, the ideal might not be self-dual
    private SelfDualOrderIdeal(SelfDualPoset poset, Set<Element> generators, boolean check) {
        super(poset, generators);
        this.poset = poset;
        if (check) {
            if (!verify()) {
                throw new Error("ideal is not self-dual");
            }
        }
    }

    // returns set of self-dual order ideals that differ in exactly one element
    public Set<SelfDualOrderIdeal> neighbors() {
        Set<SelfDualOrderIdeal> output = new HashSet<SelfDualOrderIdeal>();
        for (Element toToggle: peaks) {
            if (poset.compare(toToggle, poset.dual(toToggle))) {
                continue;
            }
            Set<Element> generators = new HashSet<Element>();
            for (Element peak: peaks) {
                if (peak == toToggle) {
                    generators.add(poset.dual(peak));
                    for (Element e: poset.coveredElements(peak)) {
                        generators.add(e);
                    }
                } else {
                    generators.add(peak);
                }
            }
            output.add(new SelfDualOrderIdeal(poset, generators, false));
        }
        return output;
    }

    public String toString() {
        String s = super.toString();
        return "<" + s + ">";
    }
}
